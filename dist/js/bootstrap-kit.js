(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// require('coffee-script/register')
module.exports = require('./lib/main')

},{"./lib/main":3}],2:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
(function() {
  var CompositeDisposable, Disposable, Emitter, ref;

  ref = require("event-kit"), Disposable = ref.Disposable, CompositeDisposable = ref.CompositeDisposable, Emitter = ref.Emitter;

  module.exports = {
    Disposable: Disposable,
    CompositeDisposable: CompositeDisposable,
    Emitter: Emitter
  };

}).call(this);

},{"event-kit":11}],3:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
(function() {
  var Anchor, Aside, CompositeDisposable, Disposable, Emitter, Glyph, Header, MenuItem, Navbar, NavbarNav, Pane, SidebarMenu, ViewComponent, WebComponent, createElementView, ref,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  ref = require('event-kit'), Disposable = ref.Disposable, CompositeDisposable = ref.CompositeDisposable, Emitter = ref.Emitter;

  WebComponent = require('./web-component');

  ViewComponent = require('./view-component');

  createElementView = function(modelClass, moduleFileName) {
    var elementFactory;
    elementFactory = require(moduleFileName);
    return WebComponent.addViewProvider(modelClass, function(component) {
      return (new elementFactory).setModel(component);
    });
  };

  Anchor = (function(superClass) {
    extend(Anchor, superClass);

    function Anchor() {
      return Anchor.__super__.constructor.apply(this, arguments);
    }

    return Anchor;

  })(WebComponent);

  createElementView(Anchor, './anchor-element');

  Glyph = (function(superClass) {
    extend(Glyph, superClass);

    function Glyph() {
      return Glyph.__super__.constructor.apply(this, arguments);
    }

    return Glyph;

  })(WebComponent);

  createElementView(Glyph, './glyph-element');

  Header = (function(superClass) {
    extend(Header, superClass);

    function Header() {
      return Header.__super__.constructor.apply(this, arguments);
    }

    return Header;

  })(WebComponent);

  createElementView(Header, './header-component');

  Navbar = (function(superClass) {
    extend(Navbar, superClass);

    function Navbar() {
      return Navbar.__super__.constructor.apply(this, arguments);
    }

    return Navbar;

  })(WebComponent);

  createElementView(Navbar, './navbar-component');

  NavbarNav = (function(superClass) {
    extend(NavbarNav, superClass);

    function NavbarNav() {
      return NavbarNav.__super__.constructor.apply(this, arguments);
    }

    return NavbarNav;

  })(WebComponent);

  createElementView(Navbar, './navbar-nav-element');

  Pane = (function(superClass) {
    extend(Pane, superClass);

    function Pane() {
      return Pane.__super__.constructor.apply(this, arguments);
    }

    return Pane;

  })(WebComponent);

  createElementView(Pane, './pane-element');

  MenuItem = (function(superClass) {
    extend(MenuItem, superClass);

    function MenuItem() {
      return MenuItem.__super__.constructor.apply(this, arguments);
    }

    return MenuItem;

  })(WebComponent);

  createElementView(MenuItem, './menu-item-element');

  SidebarMenu = (function(superClass) {
    extend(SidebarMenu, superClass);

    function SidebarMenu() {
      return SidebarMenu.__super__.constructor.apply(this, arguments);
    }

    return SidebarMenu;

  })(WebComponent);

  createElementView(SidebarMenu, './sidebar-menu-element');

  Aside = (function(superClass) {
    extend(Aside, superClass);

    function Aside() {
      return Aside.__super__.constructor.apply(this, arguments);
    }

    return Aside;

  })(WebComponent);

  WebComponent.addViewProvider(Aside, function(object) {
    return (new ViewComponent(object, 'aside')).setModel(object);
  });

  module.exports = {
    Anchor: Anchor,
    Glyph: Glyph,
    Header: Header,
    Navbar: Navbar,
    NavbarNav: NavbarNav,
    Pane: Pane,
    MenuItem: MenuItem,
    Aside: Aside,
    SidebarMenu: SidebarMenu
  };

}).call(this);

},{"./view-component":5,"./web-component":7,"event-kit":11}],4:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
(function() {
  var slice = [].slice;

  module.exports = {
    str2elem: function(string, tagName) {
      var e;
      e = document.createElement(tagName != null ? tagName : 'div');
      e.innerHTML = string;
      if (e.childNodes.length === 1) {
        e = e.childNodes[0];
      }
      return e;
    },
    addClasses: function() {
      var classlist, element, i, item, len, ref, results;
      element = arguments[0], classlist = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      results = [];
      for (i = 0, len = classlist.length; i < len; i++) {
        item = classlist[i];
        if (item instanceof Array) {
          callee.apply(null, [element].concat(slice.call(item)));
          continue;
        }
        if (typeof item === 'string') {
          item = item.trim().split(/\s+/g);
          results.push((ref = element.classList).add.apply(ref, item));
        } else {
          results.push(void 0);
        }
      }
      return results;
    }
  };

}).call(this);

},{}],5:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
(function() {
  var ViewComponent, addClasses;

  addClasses = require('./util').addClasses;

  module.exports = ViewComponent = (function() {
    function ViewComponent(model, tagName) {
      this.tagName = tagName;
      this.domNode = null;
      this.subscription = null;
      this.setModel(model);
    }

    ViewComponent.prototype.createDomNode = function() {
      var e;
      if (this.tagName == null) {
        throw new Error("You have to implement createDomNode()");
      }
      e = document.createElement(this.tagName);
      e.innerHTML = this.model.getString();
      return e;
    };

    ViewComponent.prototype.updateDomNode = function() {};

    ViewComponent.prototype.getDomNode = function() {
      return this.domNode;
    };

    ViewComponent.prototype.setModel = function(model1) {
      var ref;
      this.model = model1;
      if (this.domNode != null) {
        this.updateDomNode();
      } else {
        this.domNode = this.createDomNode();
      }
      if (this.model.action != null) {
        this.domNode.addEventListener('click', this.model.action);
      }
      if (this.model.options["class"]) {
        addClasses(this.domNode, this.model.options["class"]);
      }
      this.domNode.btkViewComponent = this;
      if ((ref = this.subscription) != null) {
        ref.dispose();
      }
      this.subscribe();
      return this.domNode;
    };

    ViewComponent.prototype.subscribe = function() {
      this.subscription = new CompositeDisposable();
      return this.subscription.add(this.model.manageComponentsViews(this));
    };

    return ViewComponent;

  })();

}).call(this);

},{"./util":4}],6:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
(function() {
  var ViewRegistry, str2elem;

  str2elem = require('./util').str2elem;

  module.exports = ViewRegistry = (function() {
    function ViewRegistry() {
      this.viewProviders = [];
      this.views = [];
    }

    ViewRegistry.prototype.addViewProvider = function(modelClass, factory) {
      return this.viewProviders.push({
        modelClass: modelClass,
        factory: factory
      });
    };

    ViewRegistry.prototype.hasView = function(object) {
      var i, len, ref, view;
      ref = this.views;
      for (i = 0, len = ref.length; i < len; i++) {
        view = ref[i];
        if (view.object === object) {
          return true;
        }
      }
      return false;
    };

    ViewRegistry.prototype.removeView = function(object) {
      var i, len, ref, view;
      ref = this.views;
      for (i = 0, len = ref.length; i < len; i++) {
        view = ref[i];
        if (view.object === object) {
          this.views.remove(view);
          return true;
        }
      }
      return false;
    };

    ViewRegistry.prototype.getView = function(object) {
      var i, j, len, len1, o, ref, ref1, ref2, view, viewProvider;
      view = null;
      if ((ref = object.options) != null ? ref.view : void 0) {
        view = object.options.view;
      } else if (object.view) {
        view = object.view;
      }
      if (view != null) {
        if (view instanceof HTMLElement) {
          return view;
        }
        if (view instanceof Function) {
          return view(object);
        }
        if (typeof view === 'string') {
          if (view.startswith('<')) {
            return str2elem(view);
          } else {
            return document.querySelector(view);
          }
        }
      }
      ref1 = this.views;
      for (i = 0, len = ref1.length; i < len; i++) {
        view = ref1[i];
        if (view.object === object) {
          return view.view;
        }
      }
      ref2 = this.viewProviders;
      for (j = 0, len1 = ref2.length; j < len1; j++) {
        viewProvider = ref2[j];
        if (object.constructor === viewProvider.modelClass) {
          o = {};
          o.object = object;
          if (typeof viewProvider.factory === 'string') {
            o.view = str2elem(viewProvider.factory);
          } else {
            o.view = viewProvider.factory(object);
          }
          this.views.push(o);
          return o.view;
        }
      }
      throw new Error("Cannot find view for object " + object);
    };

    return ViewRegistry;

  })();

}).call(this);

},{"./util":4}],7:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
(function() {
  var Emitter, ViewRegistry, WebComponent, initViews, str2elem, views,
    slice = [].slice;

  Emitter = require('./event-kit').Emitter;

  ViewRegistry = require('./view-registry');

  str2elem = require('./util').str2elem;

  views = null;

  initViews = function() {
    views = new ViewRegistry();
    return views.addViewProvider(WebComponent, function(object) {
      var e;
      e = str2elem(object.getString());
      if (object.action) {
        e.addEventListener('click', function() {
          return object.trigger();
        });
      }
      object.manageComponentsViews(e);
      return e;
    });
  };

  initViews();

  WebComponent = (function() {
    WebComponent.clearViewRegistry = function() {
      return initViews();
    };

    WebComponent.getView = function(component) {
      return views.getView(component);
    };

    WebComponent.addViewProvider = function(modelClass, callback) {
      return views.addViewProvider(modelClass, callback);
    };

    function WebComponent() {
      var args, maybeAction;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      if (!(this instanceof WebComponent)) {
        return (function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor, result = func.apply(child, args);
          return Object(result) === result ? result : child;
        })(WebComponent, args, function(){});
      }
      this.options = {};
      this.string = null;
      this.components = [];
      if (this.emitter == null) {
        this.emitter = new Emitter();
      }
      this.container = null;
      if (args.length > 0) {
        if (typeof args[0] === 'string') {
          this.string = args[0];
          args = args.slice(1);
        }
      }
      if (args.length > 0) {
        if (!((args[0] instanceof WebComponent) || (args[0] instanceof Array))) {
          this.options = args[0];
          args = args.slice(1);
        }
      }
      if (args.length > 0) {
        maybeAction = args[args.length - 1];
        if (maybeAction instanceof Function) {
          this.onDidTrigger(action);
          args = args.slice(0, -1);
        }
      }
      this.addComponents.apply(this, args);
    }

    WebComponent.prototype.getString = function() {
      return this.string || '';
    };

    WebComponent.prototype.isContainedIn = function(type) {
      var component;
      component = this;
      while (component.container != null) {
        if (component.container instanceof type) {
          return true;
        }
        component = component.container;
      }
      return false;
    };

    WebComponent.prototype.addComponent = function() {
      var action, args, component;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      component = args[0];
      action = null;
      if (typeof component === 'string') {
        component = (function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor, result = func.apply(child, args);
          return Object(result) === result ? result : child;
        })(WebComponent, args, function(){});
      } else {
        if (args.length > 1) {
          action = args[1];
        }
      }
      this.components.push(component);
      component.container = this;
      this.emitter.emit('did-add-component', {
        parent: this,
        component: component
      });
      if (action) {
        component.onDidTrigger(action);
      }
      return component;
    };

    WebComponent.prototype.getComponent = function(index) {
      if (index == null) {
        index = 0;
      }
      return this.components[index];
    };

    WebComponent.prototype.getComponents = function() {
      return this.components;
    };

    WebComponent.prototype.getNextComponent = function(component) {
      var next;
      next = this.components.indexOf(component) + 1;
      if (next >= this.components.length) {
        return null;
      } else {
        return this.components[next];
      }
    };

    WebComponent.prototype.getPrevComponent = function(component) {
      var prev;
      prev = this.components.indexOf(component) - 1;
      if (index < 0) {
        return null;
      } else {
        return this.components[index];
      }
    };

    WebComponent.prototype.addComponents = function() {
      var arg, args, component, i, len, results;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      results = [];
      for (i = 0, len = args.length; i < len; i++) {
        arg = args[i];
        if (!arg) {
          continue;
        }
        if (arg instanceof Array) {
          results.push((function() {
            var j, len1, results1;
            results1 = [];
            for (j = 0, len1 = arg.length; j < len1; j++) {
              component = arg[j];
              results1.push(this.addComponent(component));
            }
            return results1;
          }).call(this));
        } else {
          results.push(this.addComponent(arg));
        }
      }
      return results;
    };

    WebComponent.prototype.removeComponent = function(component) {
      component.container = null;
      this.components.remove(component);
      return this.emitter.emit('did-remove-component', {
        parent: this,
        component: component
      });
    };

    WebComponent.prototype.onDidTrigger = function(callback) {
      return this.emitter.on('did-trigger', callback);
    };

    WebComponent.prototype.trigger = function() {
      return this.emitter.emit('did-trigger', this);
    };

    WebComponent.prototype.onDidAddComponent = function(callback) {
      return this.emitter.on('did-add-component', callback);
    };

    WebComponent.prototype.onDidRemoveComponent = function(callback) {
      return this.emitter.on('did-remove-component', callback);
    };

    WebComponent.prototype.observeComponents = function(callback) {
      var component, i, len, ref;
      ref = this.getComponents();
      for (i = 0, len = ref.length; i < len; i++) {
        component = ref[i];
        callback(component);
      }
      return this.emitter.on('did-add-component', function(arg1) {
        var component;
        component = arg1.component;
        return callback(component);
      });
    };

    WebComponent.prototype.manageComponentsViews = function(element) {
      return this.observeComponents(function(component) {
        element.append(WebComponent.prototype.getView(component));
        return component.onDidRemoveComponent(function(arg1) {
          var component, e, error;
          component = arg1.component;
          try {
            return element.removeChild(WebComponent.prototype.getView(component));
          } catch (error) {
            e = error;
            return null;
          }
        });
      });
    };

    return WebComponent;

  })();

  module.exports = WebComponent;

}).call(this);

},{"./event-kit":2,"./util":4,"./view-registry":6}],8:[function(require,module,exports){
(function() {
  var CompositeDisposable;

  module.exports = CompositeDisposable = (function() {
    CompositeDisposable.prototype.disposed = false;


    /*
    Section: Construction and Destruction
     */

    function CompositeDisposable() {
      var disposable, _i, _len;
      this.disposables = new Set;
      for (_i = 0, _len = arguments.length; _i < _len; _i++) {
        disposable = arguments[_i];
        this.add(disposable);
      }
    }

    CompositeDisposable.prototype.dispose = function() {
      if (!this.disposed) {
        this.disposed = true;
        this.disposables.forEach(function(disposable) {
          return disposable.dispose();
        });
        this.disposables = null;
      }
    };


    /*
    Section: Managing Disposables
     */

    CompositeDisposable.prototype.add = function() {
      var disposable, _i, _len;
      if (!this.disposed) {
        for (_i = 0, _len = arguments.length; _i < _len; _i++) {
          disposable = arguments[_i];
          this.disposables.add(disposable);
        }
      }
    };

    CompositeDisposable.prototype.remove = function(disposable) {
      if (!this.disposed) {
        this.disposables["delete"](disposable);
      }
    };

    CompositeDisposable.prototype.clear = function() {
      if (!this.disposed) {
        this.disposables.clear();
      }
    };

    return CompositeDisposable;

  })();

}).call(this);

},{}],9:[function(require,module,exports){
(function() {
  var Disposable;

  module.exports = Disposable = (function() {
    Disposable.prototype.disposed = false;

    Disposable.isDisposable = function(object) {
      return typeof (object != null ? object.dispose : void 0) === "function";
    };


    /*
    Section: Construction and Destruction
     */

    function Disposable(disposalAction) {
      this.disposalAction = disposalAction;
    }

    Disposable.prototype.dispose = function() {
      if (!this.disposed) {
        this.disposed = true;
        if (typeof this.disposalAction === "function") {
          this.disposalAction();
        }
        this.disposalAction = null;
      }
    };

    return Disposable;

  })();

}).call(this);

},{}],10:[function(require,module,exports){
(function() {
  var Disposable, Emitter;

  Disposable = require('./disposable');

  module.exports = Emitter = (function() {
    Emitter.exceptionHandlers = [];

    Emitter.onEventHandlerException = function(exceptionHandler) {
      if (this.exceptionHandlers.length === 0) {
        this.dispatch = this.exceptionHandlingDispatch;
      }
      this.exceptionHandlers.push(exceptionHandler);
      return new Disposable((function(_this) {
        return function() {
          _this.exceptionHandlers.splice(_this.exceptionHandlers.indexOf(exceptionHandler), 1);
          if (_this.exceptionHandlers.length === 0) {
            return _this.dispatch = _this.simpleDispatch;
          }
        };
      })(this));
    };

    Emitter.simpleDispatch = function(handler, value) {
      return handler(value);
    };

    Emitter.exceptionHandlingDispatch = function(handler, value) {
      var exception, exceptionHandler, _i, _len, _ref, _results;
      try {
        return handler(value);
      } catch (_error) {
        exception = _error;
        _ref = this.exceptionHandlers;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          exceptionHandler = _ref[_i];
          _results.push(exceptionHandler(exception));
        }
        return _results;
      }
    };

    Emitter.dispatch = Emitter.simpleDispatch;

    Emitter.prototype.disposed = false;


    /*
    Section: Construction and Destruction
     */

    function Emitter() {
      this.clear();
    }

    Emitter.prototype.clear = function() {
      return this.handlersByEventName = {};
    };

    Emitter.prototype.dispose = function() {
      this.handlersByEventName = null;
      return this.disposed = true;
    };


    /*
    Section: Event Subscription
     */

    Emitter.prototype.on = function(eventName, handler, unshift) {
      var currentHandlers;
      if (unshift == null) {
        unshift = false;
      }
      if (this.disposed) {
        throw new Error("Emitter has been disposed");
      }
      if (typeof handler !== 'function') {
        throw new Error("Handler must be a function");
      }
      if (currentHandlers = this.handlersByEventName[eventName]) {
        if (unshift) {
          this.handlersByEventName[eventName] = [handler].concat(currentHandlers);
        } else {
          this.handlersByEventName[eventName] = currentHandlers.concat(handler);
        }
      } else {
        this.handlersByEventName[eventName] = [handler];
      }
      return new Disposable(this.off.bind(this, eventName, handler));
    };

    Emitter.prototype.preempt = function(eventName, handler) {
      return this.on(eventName, handler, true);
    };

    Emitter.prototype.off = function(eventName, handlerToRemove) {
      var handler, newHandlers, oldHandlers, _i, _len;
      if (this.disposed) {
        return;
      }
      if (oldHandlers = this.handlersByEventName[eventName]) {
        newHandlers = [];
        for (_i = 0, _len = oldHandlers.length; _i < _len; _i++) {
          handler = oldHandlers[_i];
          if (handler !== handlerToRemove) {
            newHandlers.push(handler);
          }
        }
        this.handlersByEventName[eventName] = newHandlers;
      }
    };


    /*
    Section: Event Emission
     */

    Emitter.prototype.emit = function(eventName, value) {
      var handler, handlers, _i, _len, _ref;
      if (handlers = (_ref = this.handlersByEventName) != null ? _ref[eventName] : void 0) {
        for (_i = 0, _len = handlers.length; _i < _len; _i++) {
          handler = handlers[_i];
          this.constructor.dispatch(handler, value);
        }
      }
    };

    return Emitter;

  })();

}).call(this);

},{"./disposable":9}],11:[function(require,module,exports){
(function() {
  exports.Emitter = require('./emitter');

  exports.Disposable = require('./disposable');

  exports.CompositeDisposable = require('./composite-disposable');

}).call(this);

},{"./composite-disposable":8,"./disposable":9,"./emitter":10}]},{},[1]);
