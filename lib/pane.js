// Generated by CoffeeScript 1.10.0
(function() {
  var Pane, PaneItem, PaneView, WebComponent, copyProperties,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  WebComponent = require('./web-component');

  PaneItem = require('./pane-item');

  PaneView = require('./pane-view');

  copyProperties = require('./util').copyProperties;

  module.exports = Pane = (function(superClass) {
    extend(Pane, superClass);

    function Pane() {
      var args, view;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      Pane.__super__.constructor.apply(this, args);
      this.activeItem = null;
      this.options.autoAttachComponents = false;
      this.subscription.add(this.observeComponents((function(_this) {
        return function(component) {
          copyProperties(PaneItem.prototype, component);
          if (_this.activeItem == null) {
            return _this.activateItem(component);
          }
        };
      })(this)));
      if (this.options.view) {
        view = WebComponent.getView(this);
        if (view.setModel == null) {
          view.setModel = PaneView.prototype.setModel;
          view.setModel(this);
        }
      }
    }

    Pane.prototype.activateItem = function(component) {
      var current;
      current = this.activeItem;
      this.activeItem = component;
      this.emitter.emit('did-active-item-change', {
        oldItem: current,
        newItem: this.activeItem
      });
      this.emitter.emit('did-activate-item', {
        item: component
      });
      this.emitter.emit('did-deactivate-item', {
        item: current
      });
      component.emitter.emit('did-activate');
      if (current != null) {
        current.emitter.emit('did-deactivate');
      }
      return current;
    };

    Pane.prototype.onDidActivateItem = function(callback) {
      return this.emitter.on('did-activate-item', callback);
    };

    Pane.prototype.onDidActiveItemChange = function(callback) {
      return this.emitter.on('did-active-item-change', callback);
    };

    Pane.prototype.onDidDeactivateItem = function(callback) {
      return this.emitter.on('did-deactivate-item', callback);
    };

    return Pane;

  })(WebComponent);

}).call(this);
