// Generated by CoffeeScript 1.10.0
(function() {
  var ViewRegistry, str2elem;

  str2elem = require('./util').str2elem;

  module.exports = ViewRegistry = (function() {
    function ViewRegistry() {
      this.viewProviders = [];
      this.views = [];
    }

    ViewRegistry.prototype.addViewProvider = function(modelClass, factory) {
      return this.viewProviders.push({
        modelClass: modelClass,
        factory: factory
      });
    };

    ViewRegistry.prototype.getViewProvider = function(modelClass) {
      var j, len, ref, viewProvider;
      ref = this.viewProviders;
      for (j = 0, len = ref.length; j < len; j++) {
        viewProvider = ref[j];
        if (modelClass.constructor === viewProvider.modelClass) {
          return viewProvider.factory;
        }
      }
    };

    ViewRegistry.prototype.hasView = function(object) {
      var j, len, ref, ref1, view;
      if (((ref = object.options) != null ? ref.view : void 0) != null) {
        return true;
      }
      ref1 = this.views;
      for (j = 0, len = ref1.length; j < len; j++) {
        view = ref1[j];
        if (view.object === object) {
          return true;
        }
      }
      return false;
    };

    ViewRegistry.prototype.replaceView = function(object, newView) {
      var currentView, i, j, len, ref, ref1, view;
      currentView = this.getView(object);
      if (((ref = object.options) != null ? ref.view : void 0) != null) {
        object.options.view = newView;
      } else {
        ref1 = this.views;
        for (i = j = 0, len = ref1.length; j < len; i = ++j) {
          view = ref1[i];
          if (view.object === object) {
            this.views[i] = view = {
              object: object,
              view: newView
            };
            break;
          }
        }
      }
      if (currentView.parentElement) {
        return currentView.parentElement.replaceChild(this.getView(object), currentView);
      }
    };

    ViewRegistry.prototype.removeView = function(object) {
      var j, len, ref, view;
      ref = this.views;
      for (j = 0, len = ref.length; j < len; j++) {
        view = ref[j];
        if (view.object === object) {
          this.views.remove(view);
          delete object.view;
          return true;
        }
      }
      return false;
    };

    ViewRegistry.prototype.makeView = function(view, object) {
      if (view instanceof Function) {
        view = view(object);
      }
      if (view instanceof HTMLElement) {
        return view;
      }
      if (typeof view === 'string') {
        if (view.match(/^</ && view.match(/>$/))) {
          return str2elem(view);
        } else {
          return document.querySelector(view);
        }
      }
    };

    ViewRegistry.prototype.getView = function(object) {
      var j, len, ref, ref1, view, viewProvider;
      if (object.view) {
        return object.view;
      }
      view = null;
      if ((ref = object.options) != null ? ref.view : void 0) {
        view = this.makeView(object.options.view, object);
      } else {
        ref1 = this.viewProviders;
        for (j = 0, len = ref1.length; j < len; j++) {
          viewProvider = ref1[j];
          if (object.constructor === viewProvider.modelClass) {
            if (typeof viewProvider.factory === 'string') {
              view = str2elem(viewProvider.factory);
            } else {
              view = viewProvider.factory(object);
            }
            break;
          }
        }
      }
      if (!view) {
        throw new Error("Cannot find view for object " + object);
      }
      this.views.push({
        object: object,
        view: view
      });
      object.view = view;
      return view;
    };

    return ViewRegistry;

  })();

}).call(this);
