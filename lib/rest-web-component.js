// Generated by CoffeeScript 1.10.0
(function() {
  var RestWebCopmonent, WebComponent,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  WebComponent = require('./web-component');

  module.exports = RestWebCopmonent = (function(superClass) {
    extend(RestWebCopmonent, superClass);

    function RestWebCopmonent() {
      return RestWebCopmonent.__super__.constructor.apply(this, arguments);
    }

    RestWebCopmonent.prototype.getUpdateURL = function() {
      return this.options.updateURL;
    };

    RestWebCopmonent.prototype.setUpdateURL = function(url) {
      return this.options.updateURL = url;
    };

    RestWebCopmonent.prototype.getHTTPMethod = function() {
      return this.options.method || 'get';
    };

    RestWebCopmonent.prototype.setHTTPMethod = function(method) {
      return this.options.method = method;
    };

    RestWebCopmonent.prototype.getParams = function() {
      return {};
    };

    RestWebCopmonent.prototype.fetchData = function() {
      var url;
      return $.get(url = this.getUpdateURL(), this.getParams(), (function(_this) {
        return function(data) {
          return _this.updateData(data);
        };
      })(this)).fail((function(_this) {
        return function(res, textStatus, error) {
          _this.setView("<div class=\"alert alert-danger alert-dismissible\">\n  <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-hidden=\"true\">Ã—</button>\n  <h4><i class=\"icon fa fa-ban\"></i> " + res.status + " " + res.statusText + "!</h4>\n  Could not get <a href=\"" + url + "\">" + url + "</a>\n</div>");
          return console.log("Details", res, textStatus, error);
        };
      })(this));
    };

    RestWebCopmonent.prototype.startUpdating = function(interval, opts) {
      if (opts == null) {
        opts = {};
      }
      if (interval == null) {
        interval = this.interval || 10000;
      }
      this.endUpdating();
      if (opts.now !== false) {
        this.fetchData();
      }
      return this.updateInterval = setInterval(((function(_this) {
        return function() {
          return _this.fetchData();
        };
      })(this)), interval);
    };

    RestWebCopmonent.prototype.endUpdating = function() {
      if (this.updateInterval == null) {
        return;
      }
      clearInterval(this.updateInterval);
      return this.updateInterval = null;
    };

    return RestWebCopmonent;

  })(WebComponent);

}).call(this);
